import streamlit as st
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np
from groq import Groq
import re
from typing import List

# =====================================================
# 1. Vorbereitung
# =====================================================

# API‚ÄëKey aus Streamlit secrets laden
groq_api_key = st.secrets["GROQ_API_KEY"]

# Groq‚ÄëClient initialisieren
client = Groq(api_key=groq_api_key)

# Anzahl der finalen Chunks, die an das Modell √ºbergeben werden
NUM_FINAL_CHUNKS = 3

# Wissensbasis: Liste an Textabschnitten √ºber Jacob Facius
# Diese Chunks wurden aus der offiziellen Website jacob‚Äëfacius.de zusammengestellt.
text_chunks = [
    # Leidenschaft und Studium
    "Jacob Facius studiert Wirtschaftsinformatik im Master an der Otto‚ÄëFriedrich‚ÄëUniversit√§t Bamberg. Er begeistert sich besonders f√ºr datengesteuerte Aspekte und nutzt pr√§zise SQL‚ÄëAbfragen, aussagekr√§ftige Power‚ÄëBI‚ÄëBerichte und moderne KI‚ÄëModelle, um aus Daten neues Wissen zu gewinnen. Sein Ziel ist es, innovative L√∂sungen zu entwickeln, die Unternehmen echten Mehrwert bieten.",

    # Werkstudent bei duagon
    "Seit Oktober 2023 arbeitet Jacob als Werkstudent im Bereich Business Intelligence bei duagon. In dieser Rolle entwickelt er KI‚ÄëModelle, beschafft und analysiert Daten, erstellt Prognosen und baut aussagekr√§ftige Power‚ÄëBI‚ÄëBerichte. Die eigenverantwortliche Mitarbeit an Projekten erm√∂glicht ihm, seine F√§higkeiten stetig zu erweitern und aktiv zur technologischen Zukunft des Unternehmens beizutragen.",

    # Master‚Äë und Bachelorstudium
    "Parallel zu seiner T√§tigkeit bei duagon begann Jacob im Oktober 2023 sein Masterstudium der Wirtschaftsinformatik in Bamberg. Davor absolvierte er im August 2023 sein Bachelorstudium der Wirtschaftswissenschaften mit Schwerpunkt Wirtschaftsinformatik an der Friedrich‚ÄëAlexander‚ÄëUniversit√§t Erlangen‚ÄëN√ºrnberg mit der Gesamtnote 2,1. Seine Bachelorarbeit √ºber Fairness in Natural Language Processing wurde mit 1,3 bewertet.",

    # Werkstudent bei Anwalt.de
    "Von Juli 2022 bis September 2023 war Jacob als Werkstudent im Bereich Business Intelligence bei Anwalt.de t√§tig. Er f√ºhrte Analysen durch, erstellte Prognosen und entwickelte Kunden‚ÄëInsights. Dabei beschaffte und bereitete er Daten auf, erstellte interaktive Power‚ÄëBI‚ÄëBerichte und f√ºhrte Ad‚Äëhoc‚ÄëAnalysen mit Python oder Excel durch; Projekte koordinierte er selbstst√§ndig und arbeitete eng mit anderen Abteilungen zusammen.",

    # Service‚ÄëErfahrung bei Anwalt.de
    "Vor seiner BI‚ÄëT√§tigkeit betreute Jacob ab Oktober 2020 im Service von Anwalt.de Rechtsanw√§lte, f√ºhrte sie in ihre Profile ein und gab SEO‚ÄëTipps. Zu seinen Aufgaben geh√∂rten Kundenakquise, -bindung und -r√ºckgewinnung sowie die Pflege von Profilen und Daten. Au√üerdem half er Ratsuchenden, den passenden Anwalt zu finden.",

    # Weitere berufliche Erfahrungen und Reisen
    "Als Customer‚ÄëCare‚ÄëAgent k√ºmmerte sich Jacob ab Februar 2020 um Forderungsmanagement, passte Profildesigns an und betrieb Datenrecherche. 2019 reiste er ein halbes Jahr durch Indien, Nepal und Indonesien und lernte dabei, mit ungewohnten Situationen umzugehen und einen k√ºhlen Kopf zu bewahren.",

    # Nebent√§tigkeiten und Schulabschluss
    "Im Oktober 2018 arbeitete Jacob als Barkeeper in der ‚ÄöVintage Bar‚Äò, bereitete Schichten vor, mixte Getr√§nke und bediente G√§ste; dabei lernte er, strukturiert und organisiert unter Stress zu arbeiten. Sein Abitur legte er 2018 am Johannes‚ÄëScharrer‚ÄëGymnasium in N√ºrnberg ab.",

    # Power‚ÄëBI‚Äë und SQL‚ÄëKompetenz
    "Jacob setzt Power BI professionell ein, um interaktive und visuell ansprechende Berichte zu erstellen, die als Grundlage f√ºr Prognosen und strategische Entscheidungen dienen. Er verf√ºgt √ºber fundierte SQL‚ÄëKenntnisse und arbeitet sowohl im Studium als auch beruflich mit komplexen Datenbank‚ÄëAbfragen.",

    # Programmiersprachen und Datenanalyse
    "Er hat sehr gute Kenntnisse in Python, und hat bereits Erfahrung mit Pandas, NumPy, Scikit‚Äëlearn und Matplotlib gesammelt. Zudem arbeitet er mit R, um Daten zu filtern, zu analysieren und in strukturierten Grafiken darzustellen.",

    # Weitere Tools und Webtechnologien
    "Jacob besitzt Erfahrung in Tableau zur Datenaufbereitung und Visualisierung. JavaScript hat er sich selbst beigebracht und in Studienprojekten genutzt; HTML und CSS beherrscht er sicher und hat seine Kenntnisse w√§hrend des Studiums vertieft.",

    # Office‚ÄëProgramme und Sprachen
    "Er ist sehr versiert im Umgang mit Excel, PowerPoint und Word. Jacob spricht Deutsch und Englisch flie√üend und verf√ºgt √ºber Grundkenntnisse in Spanisch.",

    # Kontakt und pers√∂nliche Daten
    "Kontaktdaten: Jacob Facius, Krugstra√üe 71, 90419 N√ºrnberg. E‚ÄëMail: info@jacob-facius.de. Telefon: +49 1637 250148.",

    # Vision und Motto
    "Jacob ist √ºberzeugt, dass der Schl√ºssel zum Erfolg darin liegt, Daten effektiv zu nutzen und in n√ºtzliche Gesch√§ftseinblicke umzuwandeln. Sein Motto lautet: ‚ÄöDatenanalyse und Programmieren faszinieren mich ‚Äì besonders wenn es dazu beitr√§gt, unternehmerische Ziele zu erreichen.‚Äò"
]

# =====================================================
# 2. Embeddings & Index
# =====================================================

# Embedding‚ÄëModell w√§hlen. "BAAI/bge-base-en-v1.5" ist ein starkes Modell; f√ºr
# deutsche Daten kann alternativ "BAAI/bge-large-de" genutzt werden (Internet
# erforderlich).
embedding_model_name = "all-MiniLM-L6-v2"
model = SentenceTransformer(embedding_model_name)

# Embeddings erstellen und normalisieren (Wichtig f√ºr Cosinus‚Äë√Ñhnlichkeit)
embeddings = model.encode(text_chunks, normalize_embeddings=True)
dimension = embeddings.shape[1]

# FAISS‚ÄëIndex mit Inner Product (Cosine Similarity) erstellen und bef√ºllen
index = faiss.IndexFlatIP(dimension)
index.add(embeddings)

# =====================================================
# 3. Hilfsfunktionen
# =====================================================

def keyword_score(chunk: str, query: str) -> int:
    """Berechnet, wie viele W√∂rter aus der Anfrage im Chunk vorkommen."""
    query_tokens = re.findall(r"\w+", query.lower())
    chunk_tokens = set(re.findall(r"\w+", chunk.lower()))
    return sum(1 for token in query_tokens if token in chunk_tokens)


def retrieve_best_chunks(user_query: str, top_candidates: int = 10, final_k: int = 3) -> List[str]:
    """
    Ermittelt die Top‚Äëk relevantesten Chunks f√ºr die Anfrage.

    Zun√§chst werden per FAISS die `top_candidates` √§hnlichsten Chunks geholt.
    Anschlie√üend sortieren wir diese anhand der Keyword‚Äë√úbereinstimmung und
    geben die `final_k` besten zur√ºck.
    """
    query_embedding = model.encode([user_query], normalize_embeddings=True)
    D, I = index.search(np.array(query_embedding), k=top_candidates)
    candidates = [text_chunks[i] for i in I[0]]
    ranked = sorted(candidates, key=lambda c: keyword_score(c, user_query), reverse=True)
    return ranked[:final_k]

# =====================================================
# 4. Streamlit‚ÄëUI Setup
# =====================================================

st.set_page_config(page_title="JacobGPT", page_icon="ü§ñ")
st.title("JacobGPTü§ñ")

# Chatverlauf in Session State speichern
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# =====================================================
# 5. Chat Interface
# =====================================================

user_input = st.chat_input("Hallo, ich bin JacobGPT. Was m√∂chtest du √ºber mich wissen?")

if user_input:
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    retrieved_chunks = retrieve_best_chunks(user_input, top_candidates=10, final_k=NUM_FINAL_CHUNKS)
    conversation_history = ""
    for message in st.session_state.chat_history[-6:]:
        role = "Benutzer" if message["role"] == "user" else "JacobGPT"
        conversation_history += f"{role}: {message['content']}\n"
    prompt = (
        "Du bist JacobGPT ‚Äì ein virtueller Assistent, der Jacob bei Bewerbungen unterst√ºtzt. "
        "Antworte pr√§zise und nutze ausschlie√ülich die unten aufgef√ºhrten Hintergrundinformationen. "
        "Sollte keine Information vorhanden sein, antworte mit 'Nicht gefunden'. \n\n"
        "=== Hintergrundinformationen ===\n"
        f"{chr(10).join(retrieved_chunks)}\n\n"
        "=== Gespr√§chsverlauf ===\n"
        f"{conversation_history}"
        "Frage: {user_input}\n"
        "Antwort:"
    )
    MODEL_NAME = "llama3-70b-8192"
    try:
        response = client.chat.completions.create(
            messages=[
                {"role": "system", "content": "Du bist JacobGPT, ein hilfreicher Assistent basierend auf Jacobs Profil."},
                {"role": "user", "content": prompt}
            ],
            model=MODEL_NAME,
            temperature=0.1,
            max_tokens=256
        )
        answer = response.choices[0].message.content.strip()
        if keyword_score(answer, " ".join(retrieved_chunks)) == 0:
            answer = "Nicht gefunden."
    except Exception as e:
        answer = f"Fehler bei der Anfrage an Groq (Modell {MODEL_NAME}): {e}"
    st.session_state.chat_history.append({"role": "assistant", "content": answer})

# =====================================================
# 6. Chatverlauf anzeigen
# =====================================================

for msg in st.session_state.chat_history:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])
